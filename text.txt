freopen("test.in", "r", stdin) ;
	    ^	    ^	 ^
	   ชื่อไฟล์	    read  redirect

freopen("test.out", "w", stdout) ;

s.length() -> หาความยาว string
s.compare("hello") -> compare -- 0 equal
			      |- 1 s ">" hello
			      |- -1 s "<" hello
cin.ignore() ;
scanf("%d\n", &n) ; 
getline(cin, s) ;

istringstream iss(a) ;

		  |-----------
#define FOR(i, a, b) ;	     |
	    ^----|	     |
	for (int i = a ; i < b ; i++ ) ;

#define long long long

#define vi vector<int>
	vi v(10) ; [0,0,0,...,0] ; -> 10
	vi v(10,-1) ; [-1,-1,-1,...,-1] ; -> 10
	v.push_back(47) ; append 47
	v.front() ; // peek 0th elem
	v.back() ; // peek last elem
	v.pop_back() ; remove last elem
	v.size() ;


Diophantine equation
ax + by = C
if gcd(a, b) doesn't divide c, no integer solution x, y
Ex 2x+3y = 1 has solution
x = 2 y = -1
2*2 + 3*(-1	) = 1 

sort vector
sort(a.begin(), a.end()) ; // increasing
sort(a.rbegin(), a.rend()) // decreasing
//sort array 
sort(a+_, a+_)
       ^    ^
      	ตั้งแต่ไหนถึงไหนกำหนดได้ แต่ vector กำหนดไม่ได้
pair<int, string> p={2, "two"} ;
p.first // 2 
p.second // "two"

vector<pair<int, int>> 
#define vii vector<pair<int, int>> 
tuple <int, int, int>
tuple <int, string, ..., char>
t = make_tuple( 2, "two", ..., '2' ) ; 

int t1 ; string t2 ; ... char tn ;
tie(t1, t2, ..., tn) = t ;
tie(t1, ignore, ..., tn) = t ; // irnoge ได้คือไม่ต้องเก็บอะไรเลย


ex ทำ ซ้ายให้เป็น ขวา
	1 3 | 1 5
	1 5 | 1 3
	2 2 | 2 4
	2 4 | 2 2
	3 7 | 3 7
vii a(n) ;
FOR ( i, 0, n ) {
	int x, y ;
	cin >> x , y ;
	a[i] = {x, -y} ;
}
sort(a.begin(), a.end()) ;
FOR ( i, 0, n ) {
	a[i].second = -a[i].second ;
}
FOR ( i, 0, n ) {
	cout << a[i].first << " " << a[i].second ;
}

//queue
queue<int> q ;
q.push(235) ; // enqueue
int fst = q.front() ;
q.pop() ; // enqueue

//stack
stack<int> s ;
s.push(...) ;
... = s.top() ;
s.pop() ;

//max heap
priority_queue<int> q ;
q.push(...) ;
... = q.top() ;
q.pop() ;

//map
map<string, int> m ;
ex m["acem"] = 2 ;
   m.count("acem") ; ---> = 1 "acem" e m
		     |--> = 0 otherwise
for ( auto x:m ) {
	x.first x.second
	key	value

}

set<int> s ;
s.insert(28) ;
int ... = s.count() ;
s.erase() ;
s.size() 

Greedy algorithms - จะใช้แบงค์ที่มากที่สุดก่อนค่อยใช้รองลงมา